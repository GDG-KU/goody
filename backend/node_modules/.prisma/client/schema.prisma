// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql" // 실제 사용하는 데이터베이스에 맞게 변경하세요.
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int       @id @default(autoincrement())
  userName     String    @unique
  email        String    @unique
  birthday     DateTime?
  profileImage String?   @map("profile_image")
  password     String
  refreshToken String?   @map("refresh_token")

  activities       Activity[]
  userLocations    UserLocation[]
  recentActivities RecentActivity[]

  @@map("user")
}

model Activity {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  locationName String   @map("location_name")
  imageUrl     String?  @map("image_url")
  createdAt    DateTime @default(now()) @map("created_at")
  userId       Int      @map("user_id")

  user User @relation(fields: [userId], references: [id])

  activityKeywords ActivityKeyword[]
  recentActivities RecentActivity[]
  activityLocation ActivityLocation[]

  @@unique([id, locationName])
  @@map("activity")
}

model Keyword {
  id          Int    @id @default(autoincrement())
  keywordName String @map("keyword_name")

  activityKeywords ActivityKeyword[]

  @@map("keyword")
}

model ActivityKeyword {
  id         Int @id @default(autoincrement())
  activityId Int @map("activity_id")
  keywordId  Int @map("keyword_id")

  activity Activity @relation(fields: [activityId], references: [id])
  keyword  Keyword  @relation(fields: [keywordId], references: [id])

  @@unique([activityId, keywordId])
  @@map("activity_keywords")
}

model ActivityLocation {
  id         Int    @id @default(autoincrement())
  activityId Int    @map("activity_id")
  name       String
  latitude   Float
  longitude  Float

  activity Activity @relation(fields: [activityId, name], references: [id, locationName])

  @@map("activity_location")
}

model UserLocation {
  id        Int   @id @default(autoincrement())
  userId    Int   @map("user_id")
  latitude  Float
  longitude Float

  user User @relation(fields: [userId], references: [id])

  @@map("user_location")
}

model RecentActivity {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  activityId Int      @map("activity_id")
  viewedAt   DateTime @default(now()) @map("viewed_at")
  user       User     @relation(fields: [userId], references: [id])
  activity   Activity @relation(fields: [activityId], references: [id])

  @@unique([userId, activityId])
  @@map("recent_activity")
}
